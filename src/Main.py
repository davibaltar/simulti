# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Tue Nov 19 19:36:12 2019
#

import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
import matplotlib.gridspec as gridspec
import numpy as np
# end wxGlade

import SecOrderSys as sos
from array import array

class Main(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Main.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        self.frame = wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((950, 620))

        # State current file
        self.modifiedFile = True
        self.savedFile = False
        self.currentFileName = "untitled*"


        # Menu Bar
        self.mainMenuBar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "New", "")
        self.Bind(wx.EVT_MENU, self.menuBarNew, id=item.GetId())
        item.Enable(False)  # Disable "New"
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open...", "")
        item.Enable(False)  # Disable "Open..."
        self.Bind(wx.EVT_MENU, self.menuBarOpen, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save", "")
        item.Enable(False)  # Disable "Save"
        self.Bind(wx.EVT_MENU, self.menuBarSave, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save As...", "")
        item.Enable(False)  # Disable "Save As..."
        self.Bind(wx.EVT_MENU, self.menuBarSaveAs, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Close", "")
        self.Bind(wx.EVT_MENU, self.menuBarClose, id=item.GetId())
        self.mainMenuBar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About SimuLTI", "")
        self.Bind(wx.EVT_MENU, self.menuBarAbout, id=item.GetId())
        self.mainMenuBar.Append(wxglade_tmp_menu, "About")
        self.SetMenuBar(self.mainMenuBar)
        # Menu Bar end

        self.mainStatusbar = self.CreateStatusBar(1)
        self.panelGraph = wx.Panel(self, wx.ID_ANY)
        figure = self.matplotlib_figure = Figure()

        self.matplotlib_figure.subplots_adjust(top=0.95, bottom=0.10, left=0.10, right=0.93, hspace=0.25, wspace=0.20)

        self.plottedGraphs = []
        gs = gridspec.GridSpec(2, 2)
        self.mainGraph = figure.add_subplot(gs[0, :])

        xGraph, yGraph, linha, xPoles, yPoles, outputs = sos.compute(self, 0, 1, 1)

        color = (0., 0., 1.)    # RGB
        self.mainGraph.grid(True)
        self.plottedGraphs += self.mainGraph.plot(xGraph, yGraph, color=color, linewidth=2)
        self.plottedGraphs += self.mainGraph.plot(xGraph, linha, color="red", linewidth=2)
        self.mainGraph.xaxis.grid(color='gray', linestyle='dotted')
        self.mainGraph.yaxis.grid(color='gray', linestyle='dotted')
        self.mainGraph.set_xlim((0, 30))
        self.mainGraph.set_ylim((0, 2))
        self.mainGraph.set_ylabel('y(t)')
        self.mainGraph.set_xlabel('[t]', horizontalalignment='right', x=1.05)

        # POLES
        self.polesGraph = figure.add_subplot(gs[1, 0])
        self.plottedGraphs += self.polesGraph.plot([0,0], [0,0], 'ro', markersize=8.0, color="green") # [xpole1, xpole2], [ypole1, ypole2]    # self.plottedGraphs[3] = Pole 2

        # Eixos
        for spine in ['left', 'bottom']:
            self.polesGraph.spines[spine].set_position('zero')

        # Esconde spines 
        for spine in ['right', 'top']:
            self.polesGraph.spines[spine].set_color('none')

        self.polesGraph.set_axisbelow(False)
        self.polesGraph.xaxis.grid(color='gray', linestyle='dotted')
        self.polesGraph.yaxis.grid(color='gray', linestyle='dotted')
        self.polesGraph.set_xlim((-2, 0))
        self.polesGraph.set_ylim((-2, 2))
        self.polesGraph.set_ylabel('Poles')
        figure.align_labels()

        self.outputParameters = figure.add_subplot(gs[1, 1])
        self.outputParameters.set_xlabel('Outputs')
        self.outputParameters.axes.get_xaxis().set_visible(False)
        self.outputParameters.axes.get_yaxis().set_visible(False)

        self.outputParameters.text(0.34, 0.94, r"$\zeta$: ", horizontalalignment='right', verticalalignment='top', color="black")
        self.outputParameters.text(0.34, 0.84, r"$\omega_n$: ", horizontalalignment='right', verticalalignment='top', color="black")        
        self.outputParameters.text(0.34, 0.74, r"$\omega_d$: ", horizontalalignment='right', verticalalignment='top', color="black")
        self.outputParameters.text(0.34, 0.64, r"$t_p$: ", horizontalalignment='right', verticalalignment='top', color="black")        
        self.outputParameters.text(0.34, 0.54, r"$t_r$: ", horizontalalignment='right', verticalalignment='top', color="black")
        self.outputParameters.text(0.34, 0.44, r"$t_{s(\%2)}$: ", horizontalalignment='right', verticalalignment='top', color="black")        
        self.outputParameters.text(0.34, 0.34, r"$M_p$: ", horizontalalignment='right', verticalalignment='top', color="black")
        self.outputParameters.text(0.34, 0.24, r"$\sigma$: ", horizontalalignment='right', verticalalignment='top', color="black")        
        self.outputParameters.text(0.34, 0.14, r"$\theta$: ", horizontalalignment='right', verticalalignment='top', color="black")

        self.outputParametersZeta = self.outputParameters.text(0.34, 0.94, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")
        self.outputParametersOmegaN = self.outputParameters.text(0.34, 0.84, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")        
        self.outputParametersOmegaD = self.outputParameters.text(0.34, 0.74, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")
        self.outputParametersTp = self.outputParameters.text(0.34, 0.64, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")        
        self.outputParametersTr = self.outputParameters.text(0.34, 0.54, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")
        self.outputParametersTs = self.outputParameters.text(0.34, 0.44, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")        
        self.outputParametersMp = self.outputParameters.text(0.34, 0.34, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")
        self.outputParametersSigma = self.outputParameters.text(0.34, 0.24, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")        
        self.outputParametersTheta = self.outputParameters.text(0.34, 0.14, "0.0000", horizontalalignment='left', verticalalignment='top', color="black")

        self.outputParametersState = self.outputParameters.text(0.50, -0.10, "-", horizontalalignment='center', verticalalignment='top', color="black")
      
        self.outputParametersP1 = self.outputParameters.text(-0.20, -0.14, "Pole 1: -00.00 + 00.00i", size = 9, horizontalalignment='right', verticalalignment='bottom', color="black")
        self.outputParametersP2 = self.outputParameters.text(-0.20, -0.23, "Pole 2: -00.00 + 00.00i", size = 9, horizontalalignment='right', verticalalignment='bottom', color="black")
                    
        figure.align_labels()

        self.matplotlibCanvas = FigureCanvas(self.panelGraph, wx.ID_ANY, figure)
        self.navToolBar = NavigationToolbar(self.matplotlibCanvas)
        self.navToolBar.Realize()
        self.buttonClear = wx.Button(self, wx.ID_ANY, "Clear")
        self.spinCtrlZeta = wx.SpinCtrlDouble(self, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
        self.sliderZeta = wx.Slider(self, wx.ID_ANY, 0, 0, 300)
        self.spinCtrlOmega = wx.SpinCtrlDouble(self, wx.ID_ANY, "1.0", min=0.0, max=1000.0)
        self.sliderOmega = wx.Slider(self, wx.ID_ANY, 10, 0, 100)
        self.radioImpulse = wx.RadioButton(self, wx.ID_ANY, "Impulse")
        self.spinCtrlImpulse = wx.SpinCtrlDouble(self, wx.ID_ANY, "1.0", min=0.0, max=100.0)
        self.radioStep = wx.RadioButton(self, wx.ID_ANY, "Step")
        self.spinCtrlStep = wx.SpinCtrlDouble(self, wx.ID_ANY, "1.0", min=0.0, max=100.0)
        self.radioRamp = wx.RadioButton(self, wx.ID_ANY, "Ramp")
        self.spinCtrlRamp = wx.SpinCtrlDouble(self, wx.ID_ANY, "1.0", min=0.0, max=100.0)
        self.emptyPanelRightBar = wx.Panel(self, wx.ID_ANY)

        self.radioImpulse.Disable()
        self.spinCtrlImpulse.Disable()
        self.radioRamp.Disable()
        self.spinCtrlRamp.Disable()

        # Clear
        self.spinCtrlZeta.SetValue(0)
        self.spinCtrlOmega.SetValue(1)
        self.sliderZeta.SetValue(0)
        self.sliderOmega.SetValue(10)
        self.spinCtrlStep.SetValue(1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.btnClear, self.buttonClear)
        self.Bind(wx.EVT_TEXT, self.changedSpinCtrlZeta, self.spinCtrlZeta)
        self.Bind(wx.EVT_SLIDER, self.changedSliderZeta, self.sliderZeta)
        self.Bind(wx.EVT_TEXT, self.changedSpinCtrlOmega, self.spinCtrlOmega)
        self.Bind(wx.EVT_SLIDER, self.changedSliderOmega, self.sliderOmega)
        self.Bind(wx.EVT_RADIOBUTTON, self.checkedRadioImpulse, self.radioImpulse)
        self.Bind(wx.EVT_TEXT, self.changedSpinCtrlImpulse, self.spinCtrlImpulse)
        self.Bind(wx.EVT_RADIOBUTTON, self.checkedRadioStep, self.radioStep)
        self.Bind(wx.EVT_TEXT, self.changedSpinCtrlStep, self.spinCtrlStep)
        self.Bind(wx.EVT_RADIOBUTTON, self.checkedRadioRamp, self.radioRamp)
        self.Bind(wx.EVT_TEXT, self.changedSpinCtrlRamp, self.spinCtrlRamp)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Main.__set_properties
        self.SetTitle("SimuLTI - " + self.currentFileName)
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./icon.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.mainStatusbar.SetStatusWidths([-1])

        # statusbar fields
        mainStatusbar_fields = [""] #Ready!
        for i in range(len(mainStatusbar_fields)):
            self.mainStatusbar.SetStatusText(mainStatusbar_fields[i], i)
        self.buttonClear.SetMinSize((100, 21))
        self.spinCtrlZeta.SetMinSize((130, 22))
        self.spinCtrlZeta.SetIncrement(0.01)
        self.spinCtrlOmega.SetMinSize((130, 22))
        self.spinCtrlOmega.SetIncrement(0.1)
        self.spinCtrlImpulse.SetMinSize((50, 22))
        self.spinCtrlImpulse.SetIncrement(0.1)
        self.radioStep.SetValue(1)
        self.spinCtrlStep.SetMinSize((50, 22))
        self.spinCtrlStep.SetIncrement(0.1)
        self.spinCtrlRamp.SetMinSize((50, 22))
        self.spinCtrlRamp.SetIncrement(0.1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Main.__do_layout
        boxSizerMain = wx.BoxSizer(wx.HORIZONTAL)
        boxSizerMainRightBar = wx.BoxSizer(wx.HORIZONTAL)
        boxSizerRightBar = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, ""), wx.VERTICAL)
        boxSizerRamp = wx.BoxSizer(wx.HORIZONTAL)
        boxSizerSpinCtrlRamp = wx.BoxSizer(wx.VERTICAL)
        boxSizerRadioRamp = wx.BoxSizer(wx.VERTICAL)
        boxSizerStep = wx.BoxSizer(wx.HORIZONTAL)
        boxSizerSpinCtrlStep = wx.BoxSizer(wx.VERTICAL)
        boxSizerRadioStep = wx.BoxSizer(wx.VERTICAL)
        boxSizerImpulse = wx.BoxSizer(wx.HORIZONTAL)
        boxSizerSpinCtrlImpulse = wx.BoxSizer(wx.VERTICAL)
        boxSizerRadioImpulse = wx.BoxSizer(wx.VERTICAL)
        boxSizerPanelGraph = wx.BoxSizer(wx.VERTICAL)
        boxSizerPanelGraph.Add(self.matplotlibCanvas, 1, wx.EXPAND, 0)
        boxSizerPanelGraph.Add(self.navToolBar, 0, wx.EXPAND, 0)
        self.panelGraph.SetSizer(boxSizerPanelGraph)
        boxSizerMain.Add(self.panelGraph, 1, wx.EXPAND, 0)
        boxSizerRightBar.Add(self.buttonClear, 0, wx.ALIGN_CENTER | wx.BOTTOM | wx.TOP, 15)
        hLineRightBarClearZeta = wx.StaticLine(self, wx.ID_ANY)
        boxSizerRightBar.Add(hLineRightBarClearZeta, 0, wx.BOTTOM | wx.EXPAND, 15)
        labelZetaRightBar = wx.StaticText(self, wx.ID_ANY, "Zeta:")
        boxSizerRightBar.Add(labelZetaRightBar, 0, wx.BOTTOM | wx.LEFT, 5)
        boxSizerRightBar.Add(self.spinCtrlZeta, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 15)
        boxSizerRightBar.Add(self.sliderZeta, 0, wx.EXPAND | wx.TOP, 10)
        hLineRightBarZetaOmega = wx.StaticLine(self, wx.ID_ANY)
        boxSizerRightBar.Add(hLineRightBarZetaOmega, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 15)
        labelOmegaRightBar = wx.StaticText(self, wx.ID_ANY, "Omega(n):")
        boxSizerRightBar.Add(labelOmegaRightBar, 0, wx.BOTTOM | wx.LEFT, 5)
        boxSizerRightBar.Add(self.spinCtrlOmega, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 15)
        boxSizerRightBar.Add(self.sliderOmega, 0, wx.EXPAND | wx.TOP, 10)
        hLineRightBarOmegaSignal = wx.StaticLine(self, wx.ID_ANY)
        boxSizerRightBar.Add(hLineRightBarOmegaSignal, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 15)
        labelSignalRightBar = wx.StaticText(self, wx.ID_ANY, "Signal R(S):")
        boxSizerRightBar.Add(labelSignalRightBar, 0, wx.BOTTOM | wx.LEFT, 5)
        boxSizerRadioImpulse.Add(self.radioImpulse, 0, wx.EXPAND | wx.TOP, 4)
        boxSizerImpulse.Add(boxSizerRadioImpulse, 1, 0, 0)
        boxSizerSpinCtrlImpulse.Add(self.spinCtrlImpulse, 0, wx.EXPAND, 0)
        boxSizerImpulse.Add(boxSizerSpinCtrlImpulse, 1, wx.EXPAND, 0)
        boxSizerRightBar.Add(boxSizerImpulse, 0, wx.EXPAND | wx.TOP, 10)
        boxSizerRadioStep.Add(self.radioStep, 0, wx.EXPAND | wx.TOP, 4)
        boxSizerStep.Add(boxSizerRadioStep, 1, 0, 0)
        boxSizerSpinCtrlStep.Add(self.spinCtrlStep, 0, wx.EXPAND, 0)
        boxSizerStep.Add(boxSizerSpinCtrlStep, 1, wx.EXPAND, 0)
        boxSizerRightBar.Add(boxSizerStep, 0, wx.EXPAND | wx.TOP, 8)
        boxSizerRadioRamp.Add(self.radioRamp, 0, wx.EXPAND | wx.TOP, 4)
        boxSizerRamp.Add(boxSizerRadioRamp, 1, 0, 0)
        boxSizerSpinCtrlRamp.Add(self.spinCtrlRamp, 0, wx.EXPAND, 0)
        boxSizerRamp.Add(boxSizerSpinCtrlRamp, 1, wx.EXPAND, 0)
        boxSizerRightBar.Add(boxSizerRamp, 0, wx.EXPAND | wx.TOP, 8)
        boxSizerRightBar.Add(self.emptyPanelRightBar, 1, wx.EXPAND, 0)
        boxSizerMainRightBar.Add(boxSizerRightBar, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
        boxSizerMain.Add(boxSizerMainRightBar, 0, wx.EXPAND, 0)
        self.SetSizer(boxSizerMain)
        self.Layout()
        self.Centre()
        # end wxGlade

    def menuBarNew(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'menuBarNew' not implemented!")
        event.Skip()

    def menuBarOpen(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'menuBarOpen' not implemented!")
        openFileDialog = wx.FileDialog(self.frame, "Open", "", "", "Simulti files (*.slti)|*.slti", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)

        openFileDialog.ShowModal()
        print(openFileDialog.GetPath())

        input_file = open(openFileDialog.GetPath(), 'rb')
        float_array = array('d')
        float_array.fromstring(input_file.read())

        self.currentFileName = openFileDialog.GetFilename()
        self.SetTitle("SimuLTI - " + self.currentFileName)

        #print (float_array)
        #print (float_array[0])

        self.spinCtrlZeta.SetValue(float(float_array[0]))
        self.sliderZeta.SetValue(float(float_array[1]))
        self.spinCtrlOmega.SetValue(float(float_array[2]))
        self.sliderOmega.SetValue(float(float_array[3]))

        if float(float_array[4]) == 1.0:
            self.spinCtrlImpulse.SetValue(float(float_array[5]))
        elif float(float_array[4]) == 2.0:
            self.spinCtrlStep.SetValue(float(float_array[5]))
        else:
            self.spinCtrlRamp.SetValue(float(float_array[5]))

        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()

        openFileDialog.Destroy()
        event.Skip()

    def menuBarSave(self, event):  # wxGlade: Main.<event_handler>
        output_file = open('sinal_teste.slti', 'wb')
        float_array = array('d', [5.123123, 10.00000, 15.12341234, 20.9999999, 25])
        float_array.tofile(output_file)
        output_file.close()
        event.Skip()

    def menuBarSaveAs(self, event):  # wxGlade: Main.<event_handler>
        fileDialog = wx.FileDialog(self, "", wildcard="Simulti files (*.slti)|*.slti", style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if fileDialog.ShowModal() == wx.ID_CANCEL:
            return

        pathname = fileDialog.GetPath()
        try:
            output_file = open(pathname, 'wb')
            radioChecked = 0.0
            radioValue = 0.0
            if self.radioImpulse.GetValue():
                radioChecked = 1.0
                radioValue = self.spinCtrlImpulse.GetValue()
            elif self.radioStep.GetValue():
                radioChecked = 2.0
                radioValue = self.spinCtrlStep.GetValue()
            else:
                radioChecked = 3.0
                radioValue = self.spinCtrlRamp.GetValue()

            float_array = array('d', [self.spinCtrlZeta.GetValue(), self.sliderZeta.GetValue(), self.spinCtrlOmega.GetValue(), self.sliderOmega.GetValue(), radioChecked, radioValue])
            float_array.tofile(output_file)
            self.currentFileName = fileDialog.GetFilename()
            self.SetTitle("SimuLTI - " + self.currentFileName)
            output_file.close()

        except IOError:
            wx.LogError("Cannot save current data in file '%s'." % pathname)

        event.Skip()

    def menuBarClose(self, event):  # wxGlade: Main.<event_handler>
        #print("Event handler 'menuBarClose' not implemented!")
        self.Close()
        event.Skip()

    def menuBarAbout(self, event):  # wxGlade: Main.<event_handler>
        #print("Event handler 'menuBarAbout' not implemented!")
        wx.MessageBox(
            caption='SimuLTI',
            message="Author: Davi Baltar\nLicense: MIT\nVersion: 1.0.0",
            style=wx.OK | wx.ICON_INFORMATION)
        event.Skip()

    def btnClear(self, event):  # wxGlade: Main.<event_handler>
        #print("Event handler 'btnClear' not implemented!")
        self.spinCtrlZeta.SetValue(0)
        self.spinCtrlOmega.SetValue(1)
        self.sliderZeta.SetValue(0)
        self.sliderOmega.SetValue(10)
        self.spinCtrlStep.SetValue(1)
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        event.Skip()

    def changedSpinCtrlZeta(self, event):  # wxGlade: Main.<event_handler>
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        self.sliderZeta.SetValue(int(self.spinCtrlZeta.GetValue() * 150))
        event.Skip()

    def changedSliderZeta(self, event):  # wxGlade: Main.<event_handler>
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        self.spinCtrlZeta.SetValue(float(self.sliderZeta.GetValue() / 150))
        event.Skip()

    def changedSpinCtrlOmega(self, event):  # wxGlade: Main.<event_handler>
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        self.sliderOmega.SetValue(int(self.spinCtrlOmega.GetValue() * 10))
        event.Skip()

    def changedSliderOmega(self, event):  # wxGlade: Main.<event_handler>
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        self.spinCtrlOmega.SetValue(float(self.sliderOmega.GetValue() / 10))
        event.Skip()

    def checkedRadioImpulse(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'checkedRadioImpulse' not implemented!")
        event.Skip()

    def changedSpinCtrlImpulse(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'changedSpinCtrlImpulse' not implemented!")
        event.Skip()

    def checkedRadioStep(self, event):  # wxGlade: Main.<event_handler>
        #print("Event handler 'checkedRadioStep' not implemented!")
        event.Skip()

    def changedSpinCtrlStep(self, event):  # wxGlade: Main.<event_handler>
        #print("Event handler 'changedSpinCtrlStep' not implemented!")
        sos.plotSecOrderSystem(self)
        self.matplotlibCanvas.draw()
        event.Skip()

    def checkedRadioRamp(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'checkedRadioRamp' not implemented!")
        event.Skip()

    def changedSpinCtrlRamp(self, event):  # wxGlade: Main.<event_handler>
        print("Event handler 'changedSpinCtrlRamp' not implemented!")
        event.Skip()

# end of class Main
